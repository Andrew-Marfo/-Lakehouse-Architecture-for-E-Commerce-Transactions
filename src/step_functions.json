{
  "Comment": "E-Commerce ETL Pipeline with Error Handling, Retries, Crawler Status Check, Parallel Queries, SNS Notifications, and Lambda Archiving",
  "StartAt": "ProcessProducts",
  "States": {
    "ProcessProducts": {
      "Type": "Task",
      "Resource": "arn:aws:states:::glue:startJobRun.sync",
      "Parameters": {
        "JobName": "product_etl_job",
        "Arguments": {
          "--bucket_name": "ecommerce-lakehouse"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 30,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "SendErrorNotification",
          "ResultPath": "$.error"
        }
      ],
      "Next": "ProcessOrders"
    },
    "ProcessOrders": {
      "Type": "Task",
      "Resource": "arn:aws:states:::glue:startJobRun.sync",
      "Parameters": {
        "JobName": "orders_etl_job",
        "Arguments": {
          "--bucket_name": "ecommerce-lakehouse"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 30,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "SendErrorNotification",
          "ResultPath": "$.error"
        }
      ],
      "Next": "ProcessOrderItems"
    },
    "ProcessOrderItems": {
      "Type": "Task",
      "Resource": "arn:aws:states:::glue:startJobRun.sync",
      "Parameters": {
        "JobName": "order_items_etl_job",
        "Arguments": {
          "--bucket_name": "ecommerce-lakehouse"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 30,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "SendErrorNotification",
          "ResultPath": "$.error"
        }
      ],
      "Next": "ArchiveFiles"
    },
    "ArchiveFiles": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "ArchiveETLFiles",
        "Payload": {
          "bucket_name": "ecommerce-lakehouse"
        }
      },
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "SendErrorNotification",
          "ResultPath": "$.error"
        }
      ],
      "Next": "RunCrawler"
    },
    "RunCrawler": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:glue:startCrawler",
      "Parameters": {
        "Name": "lakehouse-crawler"
      },
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "SendErrorNotification",
          "ResultPath": "$.error"
        }
      ],
      "Next": "WaitForCrawler"
    },
    "WaitForCrawler": {
      "Type": "Wait",
      "Seconds": 90,
      "Next": "CheckCrawlerStatus"
    },
    "CheckCrawlerStatus": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:glue:getCrawler",
      "Parameters": {
        "Name": "lakehouse-crawler"
      },
      "ResultPath": "$.crawlerStatus",
      "Next": "EvaluateCrawlerStatus",
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "SendErrorNotification",
          "ResultPath": "$.error"
        }
      ]
    },
    "EvaluateCrawlerStatus": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.crawlerStatus.Crawler.LastCrawl.Status",
          "StringEquals": "SUCCEEDED",
          "Next": "RunParallelQueries"
        },
        {
          "Variable": "$.crawlerStatus.Crawler.LastCrawl.Status",
          "StringEquals": "FAILED",
          "Next": "SendCrawlerFailureNotification"
        }
      ],
      "Default": "WaitForCrawler"
    },
    "SendCrawlerFailureNotification": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "arn:aws:sns:eu-west-1:195275667627:EcommercePipelineNotifications",
        "Message": "Crawler lakehouse-crawler failed. Details: $$.Execution.Name"
      },
      "Next": "Fail"
    },
    "Fail": {
      "Type": "Fail"
    },
    "RunParallelQueries": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "QueryProducts",
          "States": {
            "QueryProducts": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
              "Parameters": {
                "QueryString": "SELECT * FROM lakehouse_dwh.products LIMIT 10",
                "WorkGroup": "primary",
                "ResultConfiguration": {
                  "OutputLocation": "s3://ecommerce-lakehouse/athena-results/"
                }
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "QueryOrders",
          "States": {
            "QueryOrders": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
              "Parameters": {
                "QueryString": "SELECT * FROM lakehouse_dwh.orders WHERE date = '2025-04-01' LIMIT 10",
                "WorkGroup": "primary",
                "ResultConfiguration": {
                  "OutputLocation": "s3://ecommerce-lakehouse/athena-results/"
                }
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "QueryOrderItems",
          "States": {
            "QueryOrderItems": {
              "Type": "Task",
              "Resource": "arn:aws:states:::athena:startQueryExecution.sync",
              "Parameters": {
                "QueryString": "SELECT * FROM lakehouse_dwh.order_items WHERE date = '2025-04-01' LIMIT 10",
                "WorkGroup": "primary",
                "ResultConfiguration": {
                  "OutputLocation": "s3://ecommerce-lakehouse/athena-results/"
                }
              },
              "End": true
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "SendErrorNotification",
          "ResultPath": "$.error"
        }
      ],
      "Next": "SendSuccessNotification"
    },
    "SendSuccessNotification": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "arn:aws:sns:eu-west-1:195275667627:EcommercePipelineNotifications",
        "Message": "All the datasets has been processed succesfully. Delta tables created and queries succeeded"
      },
      "Next": "Success"
    },
    "Success": {
      "Type": "Succeed"
    },
    "SendErrorNotification": {
      "Type": "Task",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "arn:aws:sns:eu-west-1:195275667627:EcommercePipelineNotifications",
        "Message": "Error in ETL pipeline: $$.Execution.Name - Error: $.error"
      },
      "Next": "Fail"
    }
  }
}